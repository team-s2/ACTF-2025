import random
from sympy import totient, factorint, gcd
from Crypto.Util.number import isPrime

FLAG = b"Lucky won't help you but wisdom can! ACTF{0oooooh_My_T3tr@ti0n!}"
class LotteryCenter():
    def __init__(self, p=None):
        self.primelis = [670144747631070976739015819027954827310379693667090873445520193836663869580245599076670148076473491050020123654751096623483807617465722698994356143777563707,
                         170953236075981703101107323627149749446399094948416530919519737926722425019602066485332700625463008928220692022155525741201814917060803040398296096589112909590796816127,
                         35756093982019706426293639025599400558582772921867310666401488874611580043479377203647832136951529097764525162097024888170529918256990041464461134501152163496501126743211147409398847307,
                         7531993227394432935495469175847581786870840148535987047046105838996369558316042438597087283959689643904418638897096661950504686097925188166275662098492041069,
                         1502305675703953507826564356364207463785905265358954425050832597353379827611347779894929874274487297076504174110953417469304402049079223143080164648064147459,
                         239187462979118019747230815457958990366061401854539190633596878790038851736407756334693453965940382959498959881612616858277374759576574603849900365838546947,
                         69733552883983886441106168440790711150895644030197258530275106690507328511836880029685067160750932842368374328059309873559063711214389833094390485760319482905397,
                         1079057966637328314460077867877075467713192523793597903382852641891007375448706143257181174464331232997171389558347754330749095005274030323571444891328903479]
        self.phiknown = {34124930134715518896711529236982688435544676865841211621198456465567416080260600865590564780793009688818566160539662278550180113998531194918531514308241449081272:2**2*(2-1)*(23-1)*(101-1)*(37243640265190289056815017157576025916805452107126785187021662435461265854381795783-1)*(49303806576313237838233035330174139354575402194313937798142433166503906251-1),
                         533966828851461433959626161423707447940548877753532983117287905265653134242658710065409240972040197771796151534027754720370686188176839747746694379214302656:2**5*(2-1)*(3-1)*(19-1)*(503-1)*(1910009901593650473786381403548828023839870277948686259673707683-1)*(152354696091732784678579455441231123500849602804790393448003131489914274686066076039203-1)}
        self.P = p if p else random.choice(self.primelis)
        self.philis = []
        self.g = None

    def _getPhiLis(self, p=None):
        phi = p if p else self.P
        self.philis = []
        while phi!=1:
            self.philis.append(phi)
            phi = self.phiknown[phi] if phi in self.phiknown else totient(phi)
        return self.philis
    
    def _check(self, g):
        if g==None or g==0:
            return False
        for i in self.philis:
            if gcd(g, i) != 1:
                return False
        return True

    def defineG(self, g):
        self._getPhiLis()
        if self._check(g):
            self.g = g
            return True
        else:
            return False
    
    def tetration(self, times, x):
        if times>len(self.philis):
            return self.tetration(len(self.philis), 0)
        if times<1:
            return None
        res = x
        for i in range(times-1,-1,-1):
            res = pow(self.g, res, self.philis[i])
        return res
    
    def checkPrime(self):
        for i in self.primelis:
            self.P = i
            self.defineG(43)
            assert isPrime(i)
            assert list(factorint(self.philis[1]).keys())[-1].bit_length() > 500  # secure for DLP
            # idx = len(self.philis)-100
            # print(self.tetration(idx, 0)==self.tetration(idx, 1))
            # print("pass: ", i)
        return True
        
    
if __name__ == '__main__':
    lottery = LotteryCenter(23)
    lottery.defineG(3)
    print(lottery.tetration(3, 2))  # 3^(3^(3^2)) % 23
    lottery.checkPrime()